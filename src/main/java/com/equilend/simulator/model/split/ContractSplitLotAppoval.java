/*
 * 1Source Ledger API
 * 1Source Ledger API provides client access to the 1Source Ledger. You can find out more about 1Source at [https://equilend.com](https://equilend.com).  This specification is work in progress. The design is meant to model the securities lending life cycle in as clean a way as possible while being robust enough to easily translate to ISLA CDM workflows and data model.  API specification is the intellectual property of EquiLend LLC and should not be copied or disseminated in any way.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: 1source_help@equilend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.equilend.simulator.model.split;

import com.equilend.simulator.model.party.InternalReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/**
 * ContractSplitLotAppoval
 */


public class ContractSplitLotAppoval {

    @JsonProperty("contractId")
    private String contractId = null;

    @JsonProperty("internalRef")
    private InternalReference internalRef = null;

    public ContractSplitLotAppoval contractId(String contractId) {
        this.contractId = contractId;
        return this;
    }

    /**
     * Get contractId
     *
     * @return contractId
     **/
    @Schema(required = true, description = "")
    public String getContractId() {
        return contractId;
    }

    public void setContractId(String contractId) {
        this.contractId = contractId;
    }

    public ContractSplitLotAppoval internalRef(InternalReference internalRef) {
        this.internalRef = internalRef;
        return this;
    }

    /**
     * Get internalRef
     *
     * @return internalRef
     **/
    @Schema(required = true, description = "")
    public InternalReference getInternalRef() {
        return internalRef;
    }

    public void setInternalRef(InternalReference internalRef) {
        this.internalRef = internalRef;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractSplitLotAppoval contractSplitLotAppoval = (ContractSplitLotAppoval) o;
        return Objects.equals(this.contractId, contractSplitLotAppoval.contractId) &&
            Objects.equals(this.internalRef, contractSplitLotAppoval.internalRef);
    }

    @Override
    public int hashCode() {
        return Objects.hash(contractId, internalRef);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContractSplitLotAppoval {\n");

        sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
        sb.append("    internalRef: ").append(toIndentedString(internalRef)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
